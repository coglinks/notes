---
title: "Presentation Title"
author: "Author"
# format: 
#   revealjs:
#     slide-number: c/t
#     width: 1600
#     height: 900
#     logo: img/logo.png
#     footer: "Organization"
#     incremental: true
#     theme: [simple]
---
# AETN1112 - Digital ElectronicsLogic gates and Boolean Algabra Prepared by: Ghufran Jaafreh

# Outcomes

Understood basics of  __Boolean algebra__  \(0 & 1 logic\)\.

Learned to construct and analyze  __truth tables__ \.

Studied main  __logic gates__  \(NOT\, AND\, OR\, NAND\, NOR\, multi\-input\)\.

Applied concepts to  __real\-world circuits__  \(push button\, alarm system\)\.

Practiced using  __timing diagrams__  to evaluate outputs\.

Gained skills in  __Boolean expressions & operator precedence__ \.

Analyzed complete circuits using  __truth tables \+ algebraic methods__ \.

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Boolean Constants and Variables

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_0.jpg)

Boolean algebra allows only two values—0 and 1\.

Logic 0 can be: false\, off\, low\, no\, open switch\.

Logic 1 can be: true\, on\, high\, yes\, closed switch\.

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Truth Tables

A truth table describes the relationship between the input and output of a logic circuit\.

The number of entries corresponds to the number of inputs\.

A 2\-input table would have 22 = 4 entries\.

A 3\-input table would have 23 = 8 entries\.

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Examples Of Truth Tables

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_1.png)

The number of input combinations will equal 2N for an N\-input truth table

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_2.png)

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_3.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Logic Gate – INVERTER (NOT)

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_4.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# The Bubble Symbol

Before we continue in our discussion\, we need to introduce a new symbol\, the bubble\.  It looks like this:

⃝

When a bubble is placed anywhere in a logic diagram\, it means inversion\.  That is\, if we have a “1” on one side of the bubble\, then we have a “0” on the other side\.

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Logic Gate - OR

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_5.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Logic gate NOR

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_6.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Logic Gate - AND

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_7.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Logic gate- NAND

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_8.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

Truth table/circuit symbol for a three input OR gate\.

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_9.jpg)

# Multiple Input Gates

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_10.jpg)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Application

The push button is wired to produce a logic 1 \(true\) when it is pressed\. Sometimes we want to know if the push button is not being pressed\, and so this circuit provides an expression that is true when the button is not pressed\.

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_11.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Example: Draw the timing diagram

Determine the OR gate output\. The OR gate inputs  _A _ and  _B _ are varying according to the timing diagrams shown\. For example\,  _A _ starts out LOW at time  _t_ 0\, goes HIGH at  _t_ 1\, back to LOW at  _t_ 3\, and so on\.

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_12.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_13.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

Determine the output  _x _ from the AND gate for the given input waveforms\.

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_14.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_15.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Alarm System for Monitoring Temperature and Pressure

This system monitors a chemical process by checking  __temperature__  and  __pressure__ \.

If the  __temperature__  or  __pressure__  goes above the safe limit\, the comparators detect it\.

The OR gate then activates the  __alarm__ \, warning operators of danger\.

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_16.jpg)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_17.jpg)

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_18.jpg)

# Describing Logic Circuits Algebraically

Any logic circuit can be described completely using AND\, OR and NOT operations

Example 1:

Find the Boolean expression of x

Solution:

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Example:

Find the Boolean expression of x

Solution:

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_19.jpg)

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_20.jpg)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

Find the Boolean expression of x

Solution:

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_21.jpg)

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_22.jpg)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Evaluating Logic Circuit Output



* We can obtain the circuit output by two methods:1\-using Boolean algebra
* 2\-Tuth table
* Rules for evaluating a Boolean expression:
  * Perform all inversions of single terms\.
  * Perform all operations within parenthesis\.
  * Perform  __AND__  operation before an  __OR__  operation unless parenthesis indicate otherwise\.
  * If an expression has a bar over it\, perform operations inside the expression\, and then invert the result\.
* Note: We can achieve the output logic level for a single set of input levels each time\.


©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Operator Precedence

The expression  _A\.B\+C _ might be interpreted in two different ways:

A\.B is Ored with C

A is ANDed with the term B\+C

If no parenthesis are present\, AND operations are performed first\.

Always read the circuit starting from the input side \(usually left to right\)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Example:

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Analysis Using Truth Table:

The first step is to list all possible input combinations in numerical order\.

The second step is to create a column in the truth table for each intermediate signal \(node\)\.

Node is the connection between one gate’s output and another gate’s input\.

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Example:

Analyse the following circuit using the truth table

Inputs: A\, B\, D\. Output: x

List all possible input combinations

Define the nodes: there are three nodes: u\, v\, w

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_23.jpg)

| A | B | C |
| :-: | :-: | :-: |
| 0 | 0 | 0 |
| 0 | 0 | 1 |
| 0 | 1 | 0 |
| 0 | 1 | 1 |
| 1 | 0 | 0 |
| 1 | 0 | 1 |
| 1 | 1 | 0 |
| 1 | 1 | 1 |

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_24.jpg)

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_25.jpg)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

Analyze the operation of the circuit below by creating a table showing the logic state at each node of the circuit

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_26.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

# Solution:

![](topic-2-boolean-algebra-logic-gates-img/Topic 2 Boolean Algebra & Logic Gates_27.png)

©Ronald J\. Tocci\, Neal S\. Widmer\, Gregory L\. Moss\, Digital Systems: Principles and Applications\, 12/e

