---
title: "T4.2 Combinational Logic Circuit Analysis And Simplification SOP POS"
# format: 
#   revealjs:
#     slide-number: c/t
#     width: 1600
#     height: 900
#     logo: img/logo.png
#     footer: "Organization"
#     incremental: true
#     theme: [simple]
---
![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_0.jpg)

# Objectives

Simplify logic circuits using Boolean and DeMorgan's theorems\.

Identify Canonical and Normal forms

Identify Maxterms and Minterms

Identify SOP and POS

Extract SOP and POS from truth table

# Review

simplify the expression

<span style="color:#ff0000">Solution:</span>

![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_1.png)

![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_2.png)

![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_3.png)

![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_4.png)

# Minterms and Maxterms



* <span style="color:#ff0000">A </span>  <span style="color:#ff0000">minterm</span>  <span style="color:#ff0000"> \(standard product\): </span> an AND term consists of all literals in their normal form or in their complement form\.
  * For example\, two binary variables  _x _ and  _y\,_
    * _xy_  _\, _  _xy_  _'\, _  _x'y_  _\, _  _x'y_  _'_
  * It is also called a standard product\.
  * _n_  variables can be combined to form 2 _n _ minterms\.
* <span style="color:#ff0000">A maxterm \(standard sums\): </span> an OR term
  * For example\, two binary variables  _x _ and  _y\,_
    * _x\+y_  _\, _  _x\+y_  _’\, _  _x’\+y_  _\, _  _x’\+y_  _’ _
  * It is also called a standard sum\.
  * 2 _n _ maxterms\.
  * Each  _maxterm_  is the complement of its corresponding  _minterm_ \, and vice versa\.
# SOP And POS

An  <span style="color:#ff0000">SOP \(Sum of Products\) </span> circuit is in the form of groups of AND gates collected by OR gates\,  <span style="color:#ff0000">note this is sum of </span>  <span style="color:#ff0000">minterms</span>

A  <span style="color:#ff0000">POS \(Product of Sums\) </span> circuit is in the form of groups of OR gates collected by AND gates\,  <span style="color:#ff0000">note this is AND of maxterms</span>

![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_5.jpg)

![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_6.jpg)

# SOP

<span style="color:#ff0000">Input expressions and </span>  <span style="color:#ff0000">minterms</span>  <span style="color:#ff0000">:</span>

If the value of the Boolean variable is 1 then we will take the variable without complementing it\.

If the value of the Boolean variable is 0 then we will take the variable by complementing it\.

<span style="color:#ff0000">Output:</span>

<span style="color:#000000">The output function can be written in SOP form by adding all the min\-terms when the output is HIGH\(1\)\.</span>

| __Variable__ |  | __Minterm__ |  |
| :-: | :-: | :-: | :-: |
| A | B | Term | Representation |
| 0 | 0 | A’B’ | m0 |
| 0 | 1 | A’B | m1 |
| 1 | 0 | AB’ | m2 |
| 1 | 1 | AB | m3 |

# Example of SOP 1

Use the SOP to write  the canonical form for the Truth Table

Design a logic circuit with three inputs\, A\, B\, and C\. Output to be HIGH only when a majority inputs are HIGH\.

<span style="color:#ff0000">Solution:</span>

# POS

<span style="color:#ff0000">Input expressions and Maxterms:</span>

1\. If the value of the Boolean variable is 0 then we will take the variable without complementing it\.

2\. If the value of the Boolean variable is 1 then we will take the variable by complementing it\.

<span style="color:#ff0000">Output:</span>

<span style="color:#000000">The output function can be written in SOP form by adding all the min\-terms when the output is HIGH\(</span>  <span style="color:#000000">0</span>  <span style="color:#000000">\)\.</span>

| __Variable__ |  | __Maxterm__ |  |
| :-: | :-: | :-: | :-: |
| A | B | Term | Representation |
| 0 | 0 | A\+B | M0 |
| 0 | 1 | A\+B’ | M1 |
| 1 | 0 | A’\+B | M2 |
| 1 | 1 | A’\+B’ | M3 |

# Example of POS

Use the POS to write  the canonical form for the Truth Table

<span style="color:#ff0000">Solution</span>

# Exercise:

Write the canonical form for the below truth table using SOP and POS\, and use DeMorgan’s theorem to prove that the two expressions are equivalent

# Simplifying Logic Circuits

The logic circuits can be simplified using Boolean algebra and Karnaugh mapping

If you have a complex logic circuit\, write the expression of the output then simplify using Boolean theorems

For the truth table find the SOP or POS then simplify it using Boolean and Demorgan’s theorem

The simplified expression called  <span style="color:#ff0000">minimal </span>

![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_7.jpg)

# Solve it !

![](Topic 4.2 Combinational Logic circuit analysis and simplification SOP_POS-img/Topic 42 Combinational Logic circuit analysis and simplification SOP_POS_8.jpg)

